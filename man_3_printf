NAM

_printf - formatted output conversion

SYNOPSIS
#include "main.h"

int _printf(const char *format, ...);

DESCRIPTION
The _printf function writes output to stdout according to a format.

The format string is a character string, beginning and ending in its
initial shift state, if any.  The format string is composed of zero or
more directives: ordinary characters (not %), which are copied
unchanged to the output stream; and conversion specifications, each of
which results in fetching zero or more subsequent arguments.  Each
conversion specification is introduced by the character %, and ends
with a conversion specifier.  In between there may be (in this order)
zero or more flags, an optional minimum field width, an optional
precision and an optional length modifier.  The arguments must
correspond properly (after type promotion) with the conversion
specifier.

													 RETURN VALUE
													 Upon successful return, _printf returns the number of characters
													 printed (excluding the null byte used to end output to strings).
													 If an output error is encountered, the function returns -1.

												
										   			 EXAMPLES
									
						    							 int main(void)
					
	     												 {

														 _printf("Hello, %s!\n", "world");
														 // Output: Hello, world!

														 _printf("The value of pi is approximately %f\n", 3.14159);
														 // Output: The value of pi is approximately 3.141590

													
		      												 _printf("You have %d apples and %d oranges\n", 5, 3);
	
														 // Output: You have 5 apples and 3 oranges

													
														 return (0);
													 }

												
													 SEE ALSO
													 printf(3), putchar(3), va_arg(3), va_start(3)

												
													 NOTES
													 The _printf function currently supports the following conversion
													 specifiers:
													 - %c: Character
													 - %s: String
													 - %d, %i: Decimal integer

												
													 Additional conversion specifiers and modifiers may be added as needed
													 by extending the _printf function and providing corresponding support
													 functions.

												
													 BUGS
													 No known bugs.

												
													 AUTHOR
													 Created by Ogtay Muradov, Shahana Gurbanova
